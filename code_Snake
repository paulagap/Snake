import pygame, random
from pygame.locals import *

def on_grid_random(): #Function to align the snake and the apple and to randomize the position of the apple
    x = random.randint(0,590)
    y = random.randint(0,590)
    return (x//10 * 10, y//10 * 10) #Do division // to get an int as result

def collision (c1, c2): #Function for the collision between the snake and the apple
    return(c1[0] == c2[0]) and (c1[1] == c2[1])

# Macro definition for snake movement      
UP = 0
RIGHT = 1
DOWN = 2
LEFT = 3

pygame.init() #Start the game
screen = pygame.display.set_mode((600,600)) #Make the screen and put the size of it
pygame.display.set_caption('Snake') #Show the name of the game

snake = [(200,200), (210, 200), (220,200)] #Each segment of the snake will be a tuple
snake_skin = pygame.Surface ((10,10)) #Snake body
snake_skin.fill((255,255,255)) #The color of the snake will be white

apple_pos = on_grid_random() #The position of the apple will be random
apple = pygame.Surface((10,10)) #Apple body
apple.fill((255,0,0)) #The color of the apple will be red

my_direction = RIGHT #Start going right

clock = pygame.time.Clock() #snake speed

font = pygame.font.Font('freesansbold.ttf', 18)
score = 0 

game_over = False
while not game_over:
    clock.tick(10) #snake speed
    for event in pygame.event.get(): #Events that cause changes
        if event.type == QUIT: #Close the game
            pygame.quit()
            exit()
            
        if event.type == KEYDOWN: #snake direction
            if event.key == K_UP:
                my_direction = UP
            if event.key == K_DOWN:
                my_direction = DOWN  
            if event.key == K_RIGHT:
                my_direction = RIGHT 
            if event.key == K_LEFT:
                my_direction = LEFT 
                
    if collision(snake[0], apple_pos): #if snake and apple collide snake rises and the score increases
        apple_pos = on_grid_random()
        snake.append((0,0))
        score = score + 1 
        
    
    if snake[0][0] == 600 or snake[0][1] == 600 or snake[0][0] < 0 or snake[0][1] < 0: # if snake collided with boundaries
        game_over = True
        break  
    
    for i in range(1, len(snake) - 1): #If the snake has hit itself 
        if snake[0][0] == snake[i][0] and snake[0][1] == snake[i][1]:
            game_over = True
            break 
    
    if game_over:
        break     
        
    for i in range(len(snake) -1, 0, -1): #The back of the snake will take the position of the front
        snake[i] = (snake[i-1][0], snake[i-1][1])                            
    
    #The snake's head gets a new tuple and actually make the snake move.
    if my_direction == UP: 
        snake [0] = (snake[0][0], snake[0][1] - 10) 
    if my_direction == DOWN:
        snake [0] = (snake[0][0], snake[0][1] + 10)
    if my_direction == RIGHT:
        snake [0] = (snake[0][0] + 10, snake[0][1]) 
    if my_direction == LEFT:
        snake [0] = (snake[0][0] - 10, snake[0][1]) 
                
    
    screen.fill((0,0,0)) #Clear screen
    screen.blit(apple, apple_pos)
    
    for x in range(0, 600, 10): # Draw vertical lines
        pygame.draw.line(screen, (40, 40, 40), (x, 0), (x, 600))
    for y in range(0, 600, 10): # Draw horizontal lines
        pygame.draw.line(screen, (40, 40, 40), (0, y), (600, y))
    
    #Score details
    score_font = font.render('Score: %s' % (score), True, (255, 255, 255))
    score_rect = score_font.get_rect()
    score_rect.topleft = (600 - 120, 10)
    screen.blit(score_font, score_rect)
    
    for pos in snake:
        screen.blit(snake_skin,pos)
            
    pygame.display.update() 

while True:
    game_over_font = pygame.font.Font('freesansbold.ttf', 75) #Game over details
    game_over_screen = game_over_font.render('Game Over', True, (255, 255, 255))
    game_over_rect = game_over_screen.get_rect()
    game_over_rect.midtop = (600 / 2, 100)
    screen.blit(game_over_screen, game_over_rect)
    pygame.display.update()
    pygame.time.wait(500)
    while True:
        for event in pygame.event.get():
            if event.type == QUIT: #Close the game
                pygame.quit()
                exit()     
    
    
    